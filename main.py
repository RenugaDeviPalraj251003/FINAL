import streamlit as st
import pandas as pd
import shap
import plotly.graph_objects as go
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
import numpy as np
from joblib import load
from lime import lime_tabular
import matplotlib.pyplot as plt
from io import BytesIO
import base64
from googletrans import Translator

# Add this at the beginning of your script (after imports)
if 'prev_language' not in st.session_state:
    st.session_state.prev_language = "English" 



# --- Load Datasets ---
recommendation_data = pd.read_csv("Expanded_Crop_Recommendation.csv")
yield_data = pd.read_csv("Crop_Yield_Expanded_Dataset.csv")

# --- Encode categorical variables ---
state_encoder = LabelEncoder()
season_encoder = LabelEncoder()
crop_encoder = LabelEncoder()

yield_data['State'] = state_encoder.fit_transform(yield_data['State'])
yield_data['Season'] = season_encoder.fit_transform(yield_data['Season'])
yield_data['Crop'] = crop_encoder.fit_transform(yield_data['Crop'])

# --- Train Models ---
X_recommend = recommendation_data.drop(columns=['label'])
y_recommend = recommendation_data['label']
crop_model = RandomForestClassifier(n_estimators=200, random_state=42)
crop_model.fit(X_recommend, y_recommend)

X_yield = yield_data[['State', 'Season', 'Crop', 'Area', 'Pesticide', 'Fertilizer', 'Annual_Rainfall']]
y_yield = yield_data['Yield']
yield_model = RandomForestRegressor(n_estimators=200, random_state=42)
yield_model.fit(X_yield, y_yield)

# --- Load Waste and Compost Models ---
try:
    waste_model = load("waste_model_scaled.joblib")
    compost_model = load("compost_model_scaled.joblib")
    waste_scaler = load("waste_scaler.joblib")  # Load the waste scaler
    compost_scaler = load("compost_scaler.joblib")  # Load the compost scaler
except:
    # Create dummy models if files not found
    from sklearn.linear_model import LinearRegression
    waste_model = LinearRegression()
    compost_model = LinearRegression()
    # Create dummy scalers
    from sklearn.preprocessing import MinMaxScaler
    waste_scaler = MinMaxScaler()
    compost_scaler = MinMaxScaler()

# --- Streamlit UI Configuration ---
st.set_page_config(
    page_title="CROP RECOMMENDATION,YIELD AND WASTE PREDICTION-рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИ, ро╡ро┐ро│рпИроЪрпНроЪро▓рпН рооро▒рпНро▒рпБроорпН роХро┤ро┐ро╡рпБ роХрогро┐рокрпНрокрпБ", 
    page_icon="ЁЯМ╛", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Initialize Translator ---
translator = Translator()

# --- Sidebar for Language Selection ---
with st.sidebar:
    st.title("ЁЯМР Language Settings")
    language = st.radio(
        "Select Language",
        ["English", "Tamil", "Hindi"],
        index=0
    )
     # Clear selections when language changes
    if st.session_state.prev_language != language:
        st.session_state.prev_language = language
        for key in ['selected_state_translated', 'selected_season_translated', 'selected_crop_translated']:
            if key in st.session_state:
                del st.session_state[key]
    
    # Add some space and additional info
    st.markdown("---")
    st.markdown("### тД╣я╕П About This App")
    st.markdown("This app helps farmers with:")
    st.markdown("- Crop recommendations")
    st.markdown("- Yield predictions")
    st.markdown("- Waste management")
    
# Set language code mapping
lang_code = {"English": "en", "Tamil": "ta", "Hindi": "hi"}[language]

# --- Translation Dictionaries ---
translations = {
    "crop_recommendation": {
        "title": {
            "en": "ЁЯФН Enter Soil & Climate Conditions for Crop Recommendation",
            "ta": "ЁЯФНрокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИроХрпНроХрпБ роорогрпН рооро▒рпНро▒рпБроорпН роХро╛ро▓роиро┐ро▓рпИ роиро┐ро▓рпИроорпИроХро│рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН",
            "hi": "ЁЯФН рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХреЗ рд▓рд┐рдП рдорд┐рдЯреНрдЯреА рдФрд░ рдЬрд▓рд╡рд╛рдпреБ рдХреА рд╕реНрдерд┐рддрд┐ рджрд░реНрдЬ рдХрд░реЗрдВ"
        },
        "nitrogen": {
            "en": "Nitrogen (N)",
            "ta": "роирпИроЯрпНро░роЬройрпН",
            "hi": "рдирд╛рдЗрдЯреНрд░реЛрдЬрди"
        },
        "phosphorus": {
            "en": "Phosphorus (P)",
            "ta": "рокро╛ро╕рпНрокро░ро╕рпН",
            "hi": "рдлрд╛рд╕реНрдлреЛрд░рд╕"
        },
        "potassium": {
            "en": "Potassium (K)",
            "ta": "рокрпКроЯрпНроЯро╛роЪро┐ропроорпН",
            "hi": "рдкреЛрдЯреЗрд╢рд┐рдпрдо"
        },
        "temperature": {
            "en": "Temperature (┬░C)",
            "ta": "ро╡рпЖрокрпНрокроиро┐ро▓рпИ",
            "hi": "рддрд╛рдкрдорд╛рди"
        },
        "humidity": {
            "en": "Humidity (%)",
            "ta": "роИро░рокрпНрокродроорпН",
            "hi": "рдирдореА"
        },
        "ph": {
            "en": "pH",
            "ta": "pH",
            "hi": "pH"
        },
        "rainfall": {
            "en": "Rainfall (mm)",
            "ta": "рооро┤рпИрокрпНрокрпКро┤ро┐ро╡рпБ",
            "hi": "рд╡рд░реНрд╖рд╛"
        },
        "button": {
            "en": "Recommend Crop",
            "ta": "рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИ",
            "hi": "рдлрд╕рд▓ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХрд░реЗрдВ"
        }
    },
    "yield_prediction": {
        "title": {
            "en": "ЁЯУИ Enter Details for Yield Prediction",
            "ta": "ЁЯУИроороХроЪрпВро▓рпН роХрогро┐рокрпНрокрпБроХрпНроХро╛рой ро╡ро┐ро╡ро░роЩрпНроХро│рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН.",
            "hi": "ЁЯУИ рдкреИрджрд╛рд╡рд╛рд░ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдХреЗ рд▓рд┐рдП рд╡рд┐рд╡рд░рдг рджрд░реНрдЬ рдХрд░реЗрдВ"
        },
        "state": {
            "en": "Select State",
            "ta": "рооро╛роиро┐ро▓родрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
            "hi": "рд░рд╛рдЬреНрдп рдЪреБрдиреЗрдВ"
        },
        "season": {
            "en": "Select Season",
            "ta": "рокро░рпБро╡родрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
            "hi": "рдореМрд╕рдо рдЪреБрдиреЗрдВ"
        },
        "area": {
            "en": "Area (hectares)",
            "ta": "рокроХрпБродро┐",
            "hi": "рдХреНрд╖реЗрддреНрд░"
        },
        "pesticide": {
            "en": "Pesticide (kg/ha)",
            "ta": "рокрпВроЪрпНроЪро┐роХрпНроХрпКро▓рпНро▓ро┐ (роХро┐ро▓рпЛ/роОроХрпНроЯро░рпН)",
            "hi": "рдХреАрдЯрдирд╛рд╢рдХ"
        },
        "fertilizer": {
            "en": "Fertilizer (kg/ha)",
            "ta": "роЙро░роорпН (роХро┐ро▓рпЛ/роОроХрпНроЯро░рпН)",
            "hi": "рдЙрд░реНрд╡рд░рдХ"
        },
        "rainfall": {
            "en": "Annual Rainfall (mm)",
            "ta": "роЖрогрпНроЯрпБ рооро┤рпИрокрпНрокрпКро┤ро┐ро╡рпБ (рооро┐роорпА)",
            "hi": "рд╡рд╛рд░реНрд╖рд┐рдХ рд╡рд░реНрд╖рд╛"
        },
        "button": {
            "en": "Predict Yield",
            "ta": "ро╡ро┐ро│рпИроЪрпНроЪро▓рпИроХрпН роХрогро┐роХрпНроХро╡рпБроорпН",
            "hi": "рдкреИрджрд╛рд╡рд╛рд░ рдХрд╛ рдЕрдиреБрдорд╛рди рд▓рдЧрд╛рдПрдВ"
        }
    },
    "other_sections": {
        "feature_prediction": {
            "en": "ЁЯМЯ Feature Prediction Module",
            "ta": "ЁЯМЯ роЕроорпНроЪ роХрогро┐рокрпНрокрпБ родрпКроХрпБродро┐",
            "hi": "ЁЯМЯ рд╕реБрд╡рд┐рдзрд╛ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдореЙрдбреНрдпреВрд▓"
        },
        "select_crop": {
            "en": "Select Crop for Feature Expectations",
            "ta": "роЕроорпНроЪ роОродро┐ро░рпНрокро╛ро░рпНрокрпНрокрпБроХро│рпБроХрпНроХро╛рой рокропро┐ро░рпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
            "hi": "рдлреАрдЪрд░ рдЕрдкреЗрдХреНрд╖рд╛рдУрдВ рдХреЗ рд▓рд┐рдП рдлрд╕рд▓ рдЪреБрдиреЗрдВ"
        },
        "get_features": {
            "en": "Get Expected Features",
            "ta": "роОродро┐ро░рпНрокро╛ро░рпНроХрпНроХрокрпНрокроЯрпБроорпН роЕроорпНроЪроЩрпНроХро│рпИрокрпН рокрпЖро▒ро╡рпБроорпН",
            "hi": "рдЕрдкреЗрдХреНрд╖рд┐рдд рд╕реБрд╡рд┐рдзрд╛рдПрдБ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ"
        },
        "waste_prediction": {
            "en": "тЩ╗я╕П Waste Prediction",
            "ta": "тЩ╗я╕П роХро┤ро┐ро╡рпБ роХрогро┐рокрпНрокрпБ",
            "hi": "тЩ╗я╕П рдЕрдкрд╢рд┐рд╖реНрдЯ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА"
        },
        "predict_waste": {
            "en": "Predict Waste",
            "ta": "роХро┤ро┐ро╡рпИ роХрогро┐роХрпНроХро╡рпБроорпН",
            "hi": "рдЕрдкрд╢рд┐рд╖реНрдЯ рдХрд╛ рдЕрдиреБрдорд╛рди рд▓рдЧрд╛рдПрдВ"
        },
        "compost_prediction": {
            "en": "ЁЯМ┐ Composting Yield Prediction",
            "ta": "ЁЯМ┐ роХроорпНрокрпЛро╕рпНроЯрпН роороХроЪрпВро▓рпН роХрогро┐рокрпНрокрпБ",
            "hi": "ЁЯМ┐ рдХрдореНрдкреЛрд╕реНрдЯ рдЙрдкрдЬ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА"
        },
        "moisture": {
            "en": "Moisture (%)",
            "ta": "роИро░рокрпНрокродроорпН (%)",
            "hi": "рдирдореА (%)"
        },
        "compost_temp": {
            "en": "Temperature (┬░C)",
            "ta": "ро╡рпЖрокрпНрокроиро┐ро▓рпИ (┬░C)",
            "hi": "рддрд╛рдкрдорд╛рди (┬░C)"
        },
        "aeration": {
            "en": "Aeration Frequency (days)",
            "ta": "роХро╛ро▒рпНро▒рпЛроЯрпНроЯроорпН роЕродро┐ро░рпНро╡рпЖрогрпН (роиро╛роЯрпНроХро│рпН)",
            "hi": "рд╡рд╛рддрди рдЖрд╡реГрддреНрддрд┐ (рджрд┐рди)"
        },
        "duration": {
            "en": "Composting Duration (weeks)",
            "ta": "роХроорпНрокрпЛро╕рпНроЯро┐роЩрпН роХро╛ро▓роорпН (ро╡ро╛ро░роЩрпНроХро│рпН)",
            "hi": "рдХрдореНрдкреЛрд╕реНрдЯрд┐рдВрдЧ рдЕрд╡рдзрд┐ (рд╕рдкреНрддрд╛рд╣)"
        },
        "predict_compost": {
            "en": "Predict Compost Yield",
            "ta": "роХроорпНрокрпЛро╕рпНроЯрпН роороХроЪрпВро▓рпИ роХрогро┐роХрпНроХро╡рпБроорпН",
            "hi": "рдХрдореНрдкреЛрд╕реНрдЯ рдЙрдкрдЬ рдХрд╛ рдЕрдиреБрдорд╛рди рд▓рдЧрд╛рдПрдВ"
        }
    },
        "options": {
        "states": {
            "Andhra Pradesh": {"ta": "роЖроирпНродро┐ро░рокрпН рокро┐ро░родрпЗроЪроорпН", "hi": "рдЖрдВрдзреНрд░ рдкреНрд░рджреЗрд╢"},
            "Arunachal Pradesh": {"ta": "роЕро░рпБрогро╛роЪрпНроЪро▓ рокро┐ро░родрпЗроЪроорпН", "hi": "рдЕрд░реБрдгрд╛рдЪрд▓ рдкреНрд░рджреЗрд╢"},
            "Assam": {"ta": "роЕроЪро╛роорпН", "hi": "рдЕрд╕рдо"},
            "Bihar": {"ta": "рокрпАроХро╛ро░рпН", "hi": "рдмрд┐рд╣рд╛рд░"},
            "Chhattisgarh": {"ta": "роЪродрпНродрпАро╕рпНроХро░рпН", "hi": "рдЫрддреНрддреАрд╕рдЧрдврд╝"},
            "Delhi": {"ta": "роЯрпЖро▓рпНро▓ро┐", "hi": "рджрд┐рд▓реНрд▓реА"},
            "Goa": {"ta": "роХрпЛро╡ро╛", "hi": "рдЧреЛрд╡рд╛"},
            "Gujarat": {"ta": "роХрпБроЬро░ро╛родрпН", "hi": "рдЧреБрдЬрд░рд╛рдд"},
            "Haryana": {"ta": "ро╣ро░ро┐ропро╛ройро╛", "hi": "рд╣рд░рд┐рдпрд╛рдгрд╛"},
            "Himachal Pradesh": {"ta": "роЗрооро╛роЪрпНроЪро▓ рокро┐ро░родрпЗроЪроорпН", "hi": "рд╣рд┐рдорд╛рдЪрд▓ рдкреНрд░рджреЗрд╢"},
            "Jammu and Kashmir": {"ta": "роЬроорпНроорпБ роХро╛ро╖рпНроорпАро░рпН", "hi": "рдЬрдореНрдореВ рдФрд░ рдХрд╢реНрдореАрд░"},
            "Jharkhand": {"ta": "роЬро╛ро░рпНроХрпНроХрогрпНроЯрпН", "hi": "рдЭрд╛рд░рдЦрдВрдб"},
            "Karnataka": {"ta": "роХро░рпНроиро╛роЯроХро╛", "hi": "рдХрд░реНрдирд╛рдЯрдХ"},
            "Kerala": {"ta": "роХрпЗро░ро│ро╛", "hi": "рдХреЗрд░рд▓"},
            "Madhya Pradesh": {"ta": "роородрпНродро┐роп рокро┐ро░родрпЗроЪроорпН", "hi": "рдордзреНрдп рдкреНрд░рджреЗрд╢"},
            "Maharashtra": {"ta": "роороХро╛ро░ро╛ро╖рпНроЯро┐ро░ро╛", "hi": "рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░"},
            "Manipur": {"ta": "роорогро┐рокрпНрокрпВро░рпН", "hi": "рдордгрд┐рдкреБрд░"},
            "Meghalaya": {"ta": "роорпЗроХро╛ро▓ропро╛", "hi": "рдореЗрдШрд╛рд▓рдп"},
            "Mizoram": {"ta": "рооро┐роЪрпЛро░роорпН", "hi": "рдорд┐рдЬреЛрд░рдо"},
            "Nagaland": {"ta": "роиро╛роХро╛ро▓ро╛роирпНродрпБ", "hi": "рдирд╛рдЧрд╛рд▓реИрдВрдб"},
            "Odisha": {"ta": "роТроЯро┐роЪро╛", "hi": "рдУрдбрд┐рд╢рд╛"},
            "Puducherry": {"ta": "рокрпБродрпБроЪрпНроЪрпЗро░ро┐", "hi": "рдкреБрджреБрдЪреНрдЪреЗрд░реА"},
            "Punjab": {"ta": "рокроЮрпНроЪро╛рокрпН", "hi": "рдкрдВрдЬрд╛рдм"},
            "Sikkim": {"ta": "роЪро┐роХрпНроХро┐роорпН", "hi": "рд╕рд┐рдХреНрдХрд┐рдо"},
            "Tamil Nadu": {"ta": "родрооро┐ро┤рпНроиро╛роЯрпБ", "hi": "рддрдорд┐рд▓рдирд╛рдбреБ"},
            "Telangana": {"ta": "родрпЖро▓рпБроЩрпНроХро╛ройро╛", "hi": "рддреЗрд▓рдВрдЧрд╛рдирд╛"},
            "Tripura": {"ta": "родро┐ро░ро┐рокрпБро░ро╛", "hi": "рддреНрд░рд┐рдкреБрд░рд╛"},
            "Uttar Pradesh": {"ta": "роЙродрпНродро░рокрпН рокро┐ро░родрпЗроЪроорпН", "hi": "рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢"},
            "Uttarakhand": {"ta": "роЙродрпНродро░роХрогрпНроЯрпН", "hi": "рдЙрддреНрддрд░рд╛рдЦрдВрдб"},
            "West Bengal": {"ta": "роорпЗро▒рпНроХрпБ ро╡роЩрпНроХро╛ро│роорпН", "hi": "рдкрд╢реНрдЪрд┐рдо рдмрдВрдЧрд╛рд▓"}
        },
        "seasons": {
            "Autumn": {"ta": "роХрпБро│ро┐ро░рпНроХро╛ро▓роорпН", "hi": "рдкрддрдЭрдбрд╝"},
            "Kharif": {"ta": "роХро▒ро┐роГрокрпН", "hi": "рдЦрд░реАрдл"},
            "Rabi": {"ta": "ро░рокро┐", "hi": "рд░рдмреА"},
            "Summer": {"ta": "роХрпЛроЯрпИ", "hi": "рдЧрд░реНрдореА"},
            "Whole Year": {"ta": "роорпБро┤рпБ роЖрогрпНроЯрпБ", "hi": "рдкреВрд░рд╛ рд╕рд╛рд▓"},
            "Winter": {"ta": "роХрпБро│ро┐ро░рпНроХро╛ро▓роорпН", "hi": "рд╕рд░реНрджреА"}
        },
        "crops": {
           "Arecanut": {"ta": "роЕро░ро┐роХрпБроЯрпНроЯрпБ", "hi": "рдкрд╛рди"},
    "Arhar/Tur": {"ta": "родрпБро╡ро░рпИ", "hi": "рдЕрд░рд╣рд░"},
    "Bajra": {"ta": "роХроорпНрокрпБ", "hi": "рдмрд╛рдЬрд░рд╛"},
    "Banana": {"ta": "ро╡ро╛ро┤рпИ", "hi": "рдХреЗрд▓рд╛"},
    "Barley": {"ta": "рокро╛ро░рпНро▓ро┐", "hi": "рдЬреМ"},
    "Black pepper": {"ta": "рооро┐ро│роХрпБ", "hi": "рдХрд╛рд▓реА рдорд┐рд░реНрдЪ"},
    "Cardamom": {"ta": "роПро▓роХрпНроХро╛ропрпН", "hi": "рдЗрд▓рд╛рдпрдЪреА"},
    "Cashewnut": {"ta": "роорпБроирпНродро┐ро░ро┐", "hi": "рдХрд╛рдЬреВ"},
    "Castor seed": {"ta": "ро░рпЗроХрпИ", "hi": "рдЕрд░рдВрдбреА"},
    "Coconut": {"ta": "родрпЛроЪрпИ", "hi": "рдирд╛рд░рд┐рдпрд▓"},  # Added space after Coconut
    "Coriander": {"ta": "роХрпКродрпНродрооро▓рпНро▓ро┐", "hi": "рдзрдирд┐рдпрд╛"},
    "Cotton(lint)": {"ta": "рокроЮрпНроЪрпБ", "hi": "рдХрдкрд╛рд╕"},
    "Cowpea(Lobia)": {"ta": "роХрпКроорпНрокрпБ", "hi": "рд▓реЛрдмрд┐рдпрд╛"},
    "Dry chillies": {"ta": "роЙро▓ро░рпНроирпНрод рооро┐ро│роХро╛ропрпН", "hi": "рд╕реВрдЦреА рдорд┐рд░реНрдЪ"},
    "Garlic": {"ta": "рокрпВрогрпНроЯрпБ", "hi": "рд▓рд╣рд╕реБрди"},
    "Ginger": {"ta": "роЗроЮрпНроЪро┐", "hi": "рдЕрджрд░рдХ"},
    "Groundnut": {"ta": "рокро░рпБродрпНродро┐", "hi": "рдореВрдВрдЧрдлрд▓реА"},
    "Guar seed": {"ta": "роХрпКро▓рпНро▓рпБ", "hi": "рдЧреНрд╡рд╛рд░"},
    "Horse-gram": {"ta": "роХрпБродро┐ро░рпИ рокро░рпБрокрпНрокрпБ", "hi": "рдШрд╛рд╕"},
    "Jowar": {"ta": "роЪрпЛро│роорпН", "hi": "рдЬреНрд╡рд╛рд░"},
    "Jute": {"ta": "роЬрпВроЯрпН", "hi": "рдЬреВрдЯ"},
    "Khesari": {"ta": "роХрпЗроЪро░ро┐", "hi": "рдХреЗрд╕рд░реА"},
    "Linseed": {"ta": "роЕро│рпНро│рпБ", "hi": "рдЕрд▓рд╕реА"},
    "Maize": {"ta": "роороХрпНроХро╛роЪрпНроЪрпЛро│роорпН", "hi": "рдордХреНрдХрд╛"},
    "Masoor": {"ta": "роороЪрпВро░ро┐", "hi": "рдорд╕реВрд░"},
    "Mesta": {"ta": "роорпЖро╕рпНроЯро╛", "hi": "рдореЗрд╕рддрд╛"},
    "Moong(Green Gram)": {"ta": "рокроЪрпНроЪрпИ рокро░рпБрокрпНрокрпБ", "hi": "рдореВрдВрдЧ"},
    "Moth": {"ta": "роорпКродрпН", "hi": "рдореЛрдд"},
    "Niger seed": {"ta": "роиро┐роХро░рпН", "hi": "рдирд┐рдЧрд░"},
    "Onion": {"ta": "ро╡рпЖроЩрпНроХро╛ропроорпН", "hi": "рдкреНрдпрд╛рдЬ"},
    "Peas & beans (Pulses)": {"ta": "рокрпАройрпНро╕рпН", "hi": "рдордЯрд░"},
    "Potato": {"ta": "роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ", "hi": "рдЖрд▓реВ"},
    "Ragi": {"ta": "ро░роХро┐", "hi": "рд░рд╛рдЧреА"},
    "Rapeseed &Mustard": {"ta": "роХрпКродрпНродрооро▓рпНро▓ро┐", "hi": "рд╕рд░рд╕реЛрдВ"},  # Removed space after &
    "Rice": {"ta": "роЕро░ро┐роЪро┐", "hi": "рдЪрд╛рд╡рд▓"},
    "Safflower": {"ta": "роЪрпЗроорпНрокро░родрпНродрпВро│рпН", "hi": "рд╕рдлреНрд▓реЙрд╡рд░"},
    "Sannhamp": {"ta": "роЪройрпНройроорпН", "hi": "рд╕рдиреНрдирдо"},
    "Sesamum": {"ta": "роОро│рпНро│рпБ", "hi": "рддрд┐рд▓"},
    "Soyabean": {"ta": "роЪрпЛропро╛", "hi": "рд╕реЛрдпрд╛рдмреАрди"},
    "Sugarcane": {"ta": "роЪро░рпНроХрпНроХро░рпИ cane", "hi": "рдЧрдиреНрдирд╛"},
    "Sunflower": {"ta": "роЪрпВро░ро┐ропроХрпНроХродро┐ро░рпН", "hi": "рд╕реВрд░рдЬрдореБрдЦреА"},
    "Sweet potato": {"ta": "роЗройро┐рокрпНрокрпБ роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ", "hi": "рд╢рдХрд░рдХрдВрдж"},
    "Tapioca": {"ta": "роХроЪро╡ро╛", "hi": "рд╕рд╛рдмреВрджрд╛рдирд╛"},
    "Tobacco": {"ta": "родроорпНрокро╛роХрпНроХрпБ", "hi": "рддрдВрдмрд╛рдХреВ"},
    "Turmeric": {"ta": "роороЮрпНроЪро│рпН", "hi": "рд╣рд▓реНрджреА"},
    "Urad": {"ta": "роЙро░рпБродрпБ", "hi": "рдЙрд░рдж"},
    "Wheat": {"ta": "роХрпЛродрпБроорпИ", "hi": "рдЧреЗрд╣реВрдВ"}
        }
    }
}

def translate_text(text, dest_lang):
    try:
        if pd.isna(text) or text == "":
            return text
        translated_text = GoogleTranslator(source='auto', target=dest_lang).translate(text)
        return translated_text  # No .text property needed
       
    except Exception as e:
        st.warning(f"Translation error for '{text}': {str(e)}")
        return text

def get_translation(key, section="crop_recommendation"):
    try:
        if section == "other_sections":
            return translations["other_sections"][key][lang_code]
        return translations[section][key][lang_code]
    except KeyError:
        return key

def get_translated_options(options, option_type):
    """Returns options in the selected language"""
    if language == "English":
        return options
    
    translated = []
    for opt in options:
        try:
            # Clean the option
            cleaned_opt = opt.strip()
            
            # For debugging - print the available keys
            if len(translated) == 0:  # Just for the first item
                available_keys = list(translations["options"][option_type].keys())
                st.write(f"Available {option_type} keys: {available_keys[:5]}...")
                st.write(f"Looking for: '{cleaned_opt}'")
            
            translated.append(translations["options"][option_type][cleaned_opt][lang_code])
        except KeyError:
            # Try case-insensitive match as fallback
            found = False
            for key in translations["options"][option_type]:
                if key.lower() == cleaned_opt.lower():
                    translated.append(translations["options"][option_type][key][lang_code])
                    found = True
                    break
            
            if not found:
                st.warning(f"Missing translation for '{opt}' in {option_type}")
                translated.append(opt)
    return translated

# --- Page Styling ---
def set_background():
    st.markdown(
        """
        <style>
        .stApp {
            background-color: #e8f5e9;
            background-image: linear-gradient(to bottom, #e8f5e9, #c8e6c9);
        }
        .stButton>button {
            background-color: #2e7d32;
            color: white;
            border-radius: 10px;
            padding: 10px 24px;
            border: none;
            font-weight: bold;
        }
        .stButton>button:hover {
            background-color: #1b5e20;
            color: white;
        }
        .css-1aumxhk {
            background-color: #a5d6a7;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        }
        h1, h2, h3, h4 {
            color: #1b5e20;
        }
        /* Sidebar styling */
        .css-1d391kg {
            background-color: #a5d6a7 !important;
        }
        .css-1d391kg h1, .css-1d391kg h2, .css-1d391kg h3 {
            color: #1b5e20 !important;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

set_background()

# --- Session State Initialization ---
if "top_crops" not in st.session_state:
    st.session_state["top_crops"] = None
if "predicted_yield" not in st.session_state:
    st.session_state["predicted_yield"] = None
if "input_features" not in st.session_state:
    st.session_state["input_features"] = None
if "lime_explanations" not in st.session_state:
    st.session_state["lime_explanations"] = {}

# --- Page Title ---
st.title("ЁЯМ╛ CROP RECOMMENDATION, YIELD AND WASTE PREDICTION")          
st.title("рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИ, ро╡ро┐ро│рпИроЪрпНроЪро▓рпН рооро▒рпНро▒рпБроорпН роХро┤ро┐ро╡рпБ роХрогро┐рокрпНрокрпБ" if language == "Tamil" else 
         "рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢, рдЙрдкрдЬ рдФрд░ рдЕрдкрд╢рд┐рд╖реНрдЯ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА" if language == "Hindi" else "")
st.header("ЁЯЪЬ Multi-Crop SHAP & LIME Explanation, Feature Expectations & Yield Prediction")

# ---------------------------
# ЁЯЪЬ Crop Recommendation Module
# ---------------------------
st.subheader(get_translation("title"))
col1, col2, col3 = st.columns(3)
with col1:
    N = st.number_input(get_translation("nitrogen"), min_value=0, max_value=300, value=90)
    P = st.number_input(get_translation("phosphorus"), min_value=0, max_value=300, value=42)
with col2:
    K = st.number_input(get_translation("potassium"), min_value=0, max_value=300, value=43)
    temperature = st.number_input(get_translation("temperature"), min_value=0.0, max_value=50.0, value=27.5)
with col3:
    humidity = st.number_input(get_translation("humidity"), min_value=0, max_value=100, value=80)
    ph = st.number_input(get_translation("ph"), min_value=0.0, max_value=14.0, value=6.5)
rainfall = st.number_input(get_translation("rainfall"), min_value=0, max_value=5000, value=120)

if st.button(get_translation("button"), key="recommend_btn"):
    input_features = pd.DataFrame([[N, P, K, temperature, humidity, ph, rainfall]], 
                                columns=X_recommend.columns)
    st.session_state["input_features"] = input_features

    probabilities = crop_model.predict_proba(input_features)[0]
    top_3_indices = np.argsort(probabilities)[-3:][::-1]

    top_crops = [crop_model.classes_[i] for i in top_3_indices]
    top_confidences = [probabilities[i] for i in top_3_indices]
    
    st.session_state["top_crops"] = top_crops
    st.session_state["top_confidences"] = top_confidences

    # SHAP Explanation
    explainer = shap.TreeExplainer(crop_model)
    shap_values = explainer.shap_values(input_features)
    
    # Create SHAP plot for each top crop
    for i, crop_idx in enumerate(top_3_indices):
        if len(shap_values) > crop_idx:  # Check if index exists
            crop_title = translate_text(f"SHAP Explanation for {top_crops[i]} (Confidence: {top_confidences[i]*100:.2f}%)", lang_code)
            st.subheader(crop_title)
            fig, ax = plt.subplots()
            shap.summary_plot(shap_values[crop_idx], input_features, plot_type="bar", show=False)
            st.pyplot(fig)
            plt.close()

    # LIME Explanation
    st.subheader(translate_text("LIME Explanations", lang_code))
    lime_explainer = lime_tabular.LimeTabularExplainer(
        X_recommend.values,
        feature_names=X_recommend.columns,
        class_names=crop_model.classes_,
        verbose=True,
        mode='classification'
    )
    
    lime_explanations = {}
    for i, crop in enumerate(top_crops):
        exp = lime_explainer.explain_instance(
            input_features.values[0],
            crop_model.predict_proba,
            num_features=len(X_recommend.columns),
            top_labels=3
        )
        
        # Save explanation to session state
        lime_img = exp.as_pyplot_figure(label=exp.top_labels[0])
        # Modify the title after creating the figure
        plt.title(f"LIME Explanation for {crop}", fontsize=14)
    
        buf = BytesIO()
        lime_img.savefig(buf, format="png", bbox_inches='tight')
        plt.close(lime_img)
        lime_explanations[crop] = buf.getvalue()
    
    st.session_state["lime_explanations"] = lime_explanations
    
    # Display LIME explanations
    for crop, img_bytes in lime_explanations.items():
        st.subheader(translate_text(f"LIME Explanation for {crop}", lang_code))
        st.image(img_bytes, use_column_width=True)

    st.markdown(translate_text("### ЁЯУК Top 3 Recommended Crops with Confidence Scores:", lang_code))
    for i, crop in enumerate(top_crops):
        st.write(translate_text(f"тЬЕ {crop}: {top_confidences[i]*100:.2f}% confidence", lang_code))
    
    st.markdown(translate_text("### ЁЯМ▒ Farmer-Friendly Explanation:", lang_code))
    for i, crop_index in enumerate(top_3_indices):
        if crop_index < len(shap_values):
            crop_name = crop_model.classes_[crop_index]
            shap_values_flat = shap_values[crop_index][0]

            explanation_text = ""
            for feature, value in zip(X_recommend.columns, shap_values_flat):
                impact = translate_text("increases" if value > 0 else "decreases", lang_code)
                farmer_tip = {
                    "Nitrogen (N)": translate_text("Essential for plant growth.", lang_code),
                    "Phosphorus (P)": translate_text("Promotes strong root development.", lang_code),
                    "Potassium (K)": translate_text("Improves disease resistance.", lang_code),
                    "Temperature": translate_text("Optimal temperature for crop growth.", lang_code),
                    "Humidity": translate_text("Regulates crop moisture balance.", lang_code),
                    "pH": translate_text("Balances soil nutrients.", lang_code),
                    "Rainfall": translate_text("Ensures consistent hydration.", lang_code)
                }.get(feature, translate_text("Optimize this feature for better results.", lang_code))

                explanation_text += f"""
                - {translate_text(feature, lang_code)}:
                    - {translate_text("Current value", lang_code)}: {input_features[feature].values[0]}
                    - {translate_text("This feature", lang_code)} {impact} {translate_text("the recommendation by", lang_code)} {abs(value):.4f}
                    - {translate_text("Farmer's Tip", lang_code)}: {farmer_tip}
                """

            st.markdown(f"#### ЁЯМ╛ {translate_text(crop_name, lang_code)}")
            st.markdown(explanation_text)

# ---------------------------
# ЁЯУИ Yield Prediction Module (Updated with multilingual options)
# ---------------------------
st.subheader(get_translation("title", "yield_prediction"))
col1, col2 = st.columns(2)

with col1:
    # State selection with translations
    state_names = state_encoder.classes_
    translated_states = get_translated_options(state_names, "states")
    state_map = dict(zip(translated_states, state_names))
    
   # For State Selection (in Yield Prediction Module)
    selected_state_translated = st.selectbox(
    get_translation("state", "yield_prediction"),
    translated_states,
    key="selected_state_translated"  )
    selected_state_name = state_map[selected_state_translated]
    
    # Season selection with translations
    season_names = season_encoder.classes_
    translated_seasons = get_translated_options(season_names, "seasons")
    season_map = dict(zip(translated_seasons, season_names))
    
    # For Season Selection
    selected_season_translated = st.selectbox(
    get_translation("season", "yield_prediction"),
    translated_seasons,
    key="selected_season_translated"  )
    selected_season_name = season_map[selected_season_translated]

with col2:
    area = st.number_input(get_translation("area", "yield_prediction"), min_value=1, max_value=8629000, value=500)
    pesticide = st.number_input(get_translation("pesticide", "yield_prediction"), min_value=0.0, max_value=2674990.0, value=5.0)

fertilizer = st.number_input(get_translation("fertilizer", "yield_prediction"), min_value=0.0, max_value=1301253200.0, value=50.0)
annual_rainfall = st.number_input(get_translation("rainfall", "yield_prediction"), min_value=0.0, max_value=6552.7, value=900.0)

if st.button(get_translation("button", "yield_prediction"), key="yield_pred_btn"):
    selected_state_encoded = state_encoder.transform([selected_state_name])[0]
    selected_season_encoded = season_encoder.transform([selected_season_name])[0]

    input_df = pd.DataFrame([[selected_state_encoded, selected_season_encoded, 1,
                            area, pesticide, fertilizer, annual_rainfall]],
                          columns=["State", "Season", "Crop", "Area", "Pesticide", "Fertilizer", "Annual_Rainfall"])

    predicted_yield = yield_model.predict(input_df)[0]
    st.session_state["predicted_yield"] = predicted_yield
    st.session_state["yield_input_features"] = input_df

    # SHAP Explanation for Yield
    explainer_yield = shap.TreeExplainer(yield_model)
    shap_values_yield = explainer_yield.shap_values(input_df)
    
    st.subheader(translate_text("SHAP Explanation for Yield Prediction", lang_code))
    fig_yield_shap, ax = plt.subplots()
    shap.summary_plot(shap_values_yield, input_df, plot_type="bar", show=False)
    st.pyplot(fig_yield_shap)
    plt.close()

    # LIME Explanation for Yield
    lime_explainer_yield = lime_tabular.LimeTabularExplainer(
        X_yield.values,
        feature_names=X_yield.columns,
        verbose=True,
        mode='regression'
    )
    
    exp_yield = lime_explainer_yield.explain_instance(
        input_df.values[0],
        yield_model.predict,
        num_features=len(X_yield.columns))
    
    lime_img_yield = exp_yield.as_pyplot_figure()
    buf_yield = BytesIO()
    lime_img_yield.savefig(buf_yield, format="png", bbox_inches='tight')
    plt.close(lime_img_yield)
    st.session_state["lime_yield_explanation"] = buf_yield.getvalue()
    
    st.subheader(translate_text("LIME Explanation for Yield Prediction", lang_code))
    st.image(buf_yield.getvalue(), use_column_width=True)

    # Create multilingual graph
    fig_yield = go.Figure(data=[
        go.Bar(
            x=[translate_text(col, lang_code) for col in input_df.columns],
            y=input_df.values[0], 
            marker=dict(color='lightgreen')
        )
    ])
    
    fig_yield.update_layout(
        title=translate_text("ЁЯУК Yield Prediction Graph", lang_code),
        xaxis_title=translate_text("Features", lang_code),
        yaxis_title=translate_text("Values", lang_code),
        template="plotly_white",
        font=dict(
            family="Arial Unicode MS, sans-serif"  # Supports multiple languages
        )
    )
    st.plotly_chart(fig_yield)
    st.success(translate_text(f"ЁЯМ╛ Predicted Yield: {predicted_yield:.2f} tons/ha", lang_code))

# ---------------------------
# ЁЯМЯ Feature Prediction Module (Updated with multilingual crop selection)
# ---------------------------
st.subheader(get_translation("feature_prediction", "other_sections"))

# Get original crop names
crop_names = crop_model.classes_
# Get translated crop names for display
translated_crops = get_translated_options(crop_names, "crops")
# Create mapping between original and translated names
crop_map = dict(zip(translated_crops, crop_names))

# For Crop Selection (in Feature Prediction Module)
selected_crop_translated = st.selectbox(
    get_translation("select_crop", "other_sections"),
    translated_crops,
    key="selected_crop_translated"  # Add this key
)
selected_crop = crop_map[selected_crop_translated]

if st.button(get_translation("get_features", "other_sections"), key="features_btn"):
    crop_data = recommendation_data[recommendation_data['label'] == selected_crop]
    avg_values = crop_data.mean(numeric_only=True)
    st.write(translate_text("### ЁЯМ┐ Expected Feature Values:", lang_code))
    for feature, value in avg_values.items():
        st.write(f"- {translate_text(feature, lang_code)}: {value:.2f}")
    st.session_state["expected_features"] = avg_values

# ---------------------------
# тЩ╗я╕П Waste Prediction Module
# ---------------------------
# ---------------------------
# тЩ╗я╕П Waste Prediction Module
# ---------------------------
st.subheader(get_translation("waste_prediction", "other_sections"))
if st.session_state.get("top_crops") is not None and st.session_state.get("predicted_yield") is not None:
    if st.button(get_translation("predict_waste", "other_sections"), key="waste_pred_btn"):
        selected_crop = st.session_state["top_crops"][0]
        predicted_yield_kg = st.session_state["predicted_yield"] * 1000  # Convert tons to kg
        
        try:
            waste_input = pd.DataFrame([[selected_crop, predicted_yield_kg]],
                                     columns=['Crop_Type', 'Yield_Amount_kg'])
            
            waste_input = pd.get_dummies(waste_input, columns=['Crop_Type'], drop_first=True)
            missing_cols = set(waste_model.feature_names_in_) - set(waste_input.columns)
            for col in missing_cols:
                waste_input[col] = 0
            waste_input = waste_input[waste_model.feature_names_in_]

            # Get the scaled prediction
            waste_pred_scaled = waste_model.predict(waste_input)[0]
            
            # Inverse transform to get the actual prediction in original units
            waste_pred = waste_scaler.inverse_transform([[waste_pred_scaled]])[0][0]
            
            st.session_state["waste_pred"] = waste_pred
            st.success(translate_text(f"ЁЯФЛ Predicted Waste Amount: {waste_pred:.2f} kg", lang_code))
        except Exception as e:
            st.error(translate_text(f"Error in waste prediction: {str(e)}", lang_code))
            st.session_state["waste_pred"] = predicted_yield_kg * 0.2  # Default 20% waste if model fails
else:
    st.warning(translate_text("тЪая╕П Please recommend a crop and predict yield first!", lang_code))

# ---------------------------
# ЁЯМ┐ Composting Yield Prediction
# ---------------------------
# ---------------------------
# ЁЯМ┐ Composting Yield Prediction
# ---------------------------
st.subheader(get_translation("compost_prediction", "other_sections"))
moisture = st.number_input(get_translation("moisture", "other_sections"), min_value=0, max_value=100, value=60)
compost_temp = st.number_input(get_translation("compost_temp", "other_sections"), min_value=0, max_value=50, value=35)
aeration = st.number_input(get_translation("aeration", "other_sections"), min_value=1, max_value=30, value=5)
duration = st.number_input(get_translation("duration", "other_sections"), min_value=1, max_value=20, value=8)

if st.button(get_translation("predict_compost", "other_sections"), key="compost_pred_btn"):
    if "waste_pred" in st.session_state:
        compost_input = pd.DataFrame([[st.session_state["waste_pred"], moisture, 
                                    compost_temp, aeration, duration]],
                    columns=['Waste_Amount_kg', 'Moisture_%', 'Temperature_┬░C', 
                            'Aeration_Frequency_days', 'Composting_Duration_weeks'])
        
        try:
            # Get the scaled prediction
            compost_yield_scaled = compost_model.predict(compost_input)[0]
            
            # Inverse transform to get the actual prediction in original units
            compost_yield = compost_scaler.inverse_transform([[compost_yield_scaled]])[0][0]
            
            st.session_state["compost_yield"] = compost_yield
            st.success(translate_text(f"ЁЯМ┐ Predicted Compost Yield: {compost_yield:.2f} kg", lang_code))
        except Exception as e:
            st.error(translate_text(f"Error in compost prediction: {str(e)}", lang_code))
            st.session_state["compost_yield"] = st.session_state["waste_pred"] * 0.6  # Default 60% conversion if model fails
